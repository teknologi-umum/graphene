name: Deploy

on:
  push:
    branches: ["master"]

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    container: node:18.16-bullseye
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Lint check
        run: pnpm run -r lint

      - name: Format with prettier
        run: pnpm run -r fmt:check

      - name: Test
        run: pnpm --filter "{packages/backend}" test
        env:
          NODE_ENV: test

      - name: Collect coverage
        run: pnpm --filter "{packages/backend}" test:coverage
        env:
          NODE_ENV: test

      - name: Send coverage report to Codecov
        uses: codecov/codecov-action@v3

      - name: Build frontend
        run: pnpm --filter "{packages/frontend}" build
        env:
          NODE_ENV: production

  cd-build:
    name: CD - Build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs:
      - ci
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/teknologi-umum/graphene
          flavor: |
            latest=false
          tags: |
            type=edge
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  cd-trigger:
    name: CD - Trigger
    runs-on: ubuntu-latest
    container: debian:bullseye
    timeout-minutes: 120
    needs:
      - cd-build
    steps:
      - name: Install required packages
        run: apt-get update && apt-get upgrade -y && apt-get install -y tar gzip curl ssh

      - name: Register SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_ed25519
          known_hosts: ${{ secrets.SSH_IP }}
          if_key_exists: replace

      - name: SSH Keyscan
        run: ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_IP }} >> /root/.ssh/known_hosts

      - name: Pull latest code
        run: >
          ssh
          -i /root/.ssh/id_ed25519 
          -p ${{ secrets.SSH_PORT }}
          -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} 
          'ssh graphene "cd ${{ secrets.SSH_WORKDIR }}/graphene && git pull" '
      - name: Build Docker images
        run: >
          ssh 
          -i /root/.ssh/id_ed25519
          -p ${{ secrets.SSH_PORT }}
          -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }}
          "ssh graphene 'echo ${{ secrets.SSH_PASSWORD }} | sudo -S bash -c '\"'cd ${{ secrets.SSH_WORKDIR }}/graphene &&
          docker compose up -d --pull always graphene'\"' ' "

      - name: Clean up docker artifacts
        run: >
          ssh 
          -i /root/.ssh/id_ed25519
          -p ${{ secrets.SSH_PORT }}
          -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }}
          "ssh pesto 'echo ${{ secrets.SSH_PASSWORD }} | sudo -S bash -c '\"'docker container prune -f &&
          docker image prune -f &&
          docker builder prune -f '\"' ' "